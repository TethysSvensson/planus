#[derive(Clone, Debug, PartialEq, PartialOrd,
{% if info.should_do_eq %}Eq, Ord, Hash,{% endif %}
::serde::Serialize, ::serde::Deserialize)]
pub enum {{ info.owned_name }}{
    {% for variant in variants -%}
        {{ variant.enum_name }}({{ variant.owned_type }}),
    {% endfor %}
}

{% if !variants.is_empty() %}
impl {{info.owned_name}} {
    {% for variant in variants -%}
    pub fn {{variant.create_name}}(
      builder: &mut ::planus::Builder,
      value: impl ::planus::{{variant.create_trait}},
    ) -> ::planus::UnionOffset<Self> {
        ::planus::UnionOffset::new({{loop.index}}, value.prepare(builder).downcast())
    }

    {% endfor %}
}
{% endif %}

{% if variants.is_empty() %}
impl ::planus::WriteAsUnion<{{info.owned_name}}> for {{info.owned_name}} {
    fn prepare(&self, _builder: &mut ::planus::Builder) -> ::planus::UnionOffset<Self> {
        match *self {}
    }
}
{% else %}
impl ::planus::WriteAsUnion<{{info.owned_name}}> for {{info.owned_name}} {
    fn prepare(&self, builder: &mut ::planus::Builder) -> ::planus::UnionOffset<Self> {
        match self {
            {% for variant in variants -%}
                Self::{{ variant.enum_name }}(value) => Self::{{variant.create_name}}(builder, value),
            {% endfor %}
        }
    }
}
{% endif %}

impl ::planus::WriteAsOptionalUnion<{{info.owned_name}}> for {{info.owned_name}} {
    fn prepare(&self, builder: &mut ::planus::Builder) -> ::core::option::Option<::planus::UnionOffset<Self>> {
        ::core::option::Option::Some(::planus::WriteAsUnion::prepare(self, builder))
    }
}

#[derive(Copy, Clone, Debug)]
pub enum {{ info.ref_name_with_lifetime }}{
    {% for variant in variants -%}
        {{ variant.enum_name }}({{ variant.ref_type }}),
    {% endfor %}
}

{% if variants.is_empty() %}
impl ::core::convert::From<{{info.ref_name}}> for {{info.owned_name}} {
    fn from(value: {{info.ref_name}}) -> Self {
        match value {}
    }
}
impl ::core::cmp::PartialEq<{{info.ref_name}}> for {{info.ref_name}} {
    fn eq(&self, _other: &{{info.ref_name}}) -> bool {
        match *self {}
    }
}
impl ::core::cmp::Eq for {{info.ref_name}} {}
impl ::core::cmp::PartialOrd<{{info.ref_name}}> for {{info.ref_name}} {
    fn partial_cmp(&self, _other: &{{info.ref_name}}) -> ::core::option::Option<::core::cmp::Ordering> {
        match *self {}
    }
}
impl ::core::cmp::Ord for {{info.ref_name}} {
    fn cmp(&self, _other: &{{info.ref_name}}) -> ::core::cmp::Ordering {
        match *self {}
    }
}
impl ::core::hash::Hash for {{info.ref_name}} {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {
        match *self {}
    }
}
{% elseif info.should_do_infallible_conversion %}
    impl<'a> ::core::convert::From<{{info.ref_name}}<'a>> for {{info.owned_name}} {
        fn from(value: {{info.ref_name}}<'a>) -> Self {
            match value {
                {% for variant in variants -%}
                    {% if variant.owned_type.starts_with("::planus::alloc::boxed::Box<") %}
                    {{info.ref_name}}::{{ variant.enum_name }}(value) => Self::{{variant.enum_name}}(::planus::alloc::boxed::Box::new(::core::convert::From::from(value))),
                    {% else %}
                    {{info.ref_name}}::{{ variant.enum_name }}(value) => Self::{{variant.enum_name}}(::core::convert::From::from(value)),
                    {% endif %}
                {% endfor %}
            }
        }
    }

    impl<'a, 'b> ::core::cmp::PartialEq<{{info.ref_name}}<'a>> for {{info.ref_name}}<'b> {
        fn eq(&self, other: &{{info.ref_name}}) -> bool {
            match (self, other) {
                {% for variant in variants -%}
                    ({{info.ref_name}}::{{ variant.enum_name }}(l), {{info.ref_name}}::{{ variant.enum_name }}(r)) => l == r,
                {% endfor %}
                {% if variants.len() > 1 %}
                    _ => false,
                {% endif %}
            }
        }
    }


    {% if info.should_do_eq %}
    impl<'a> ::core::cmp::Eq for {{info.ref_name}}<'a> {}
    impl<'a, 'b> ::core::cmp::PartialOrd<{{info.ref_name}}<'a>> for {{info.ref_name}}<'b> {
        fn partial_cmp(&self, other: &{{info.ref_name}}) -> ::core::option::Option<::core::cmp::Ordering> {
            ::core::option::Option::Some(::core::cmp::Ord::cmp(self, other))
        }
    }

    impl<'a> ::core::cmp::Ord for {{info.ref_name}}<'a> {
        fn cmp(&self, other: &{{info.ref_name}}<'_>) -> ::core::cmp::Ordering {
        {% if variants.len() > 1 %}
            fn discriminant(value: &{{info.ref_name}}<'_>) -> u8 {
                match value {
                {% for variant in variants -%}
                    {{info.ref_name}}::{{ variant.enum_name }}(_) => {{loop.index}},
                {% endfor %}
                }
            }
            let self_discriminant = discriminant(self);
            let other_discriminant = discriminant(self);
            if self_discriminant == other_discriminant {
                match (self, other) {
                {% for variant in variants -%}
                    ({{info.ref_name}}::{{ variant.enum_name }}(l), {{info.ref_name}}::{{ variant.enum_name }}(r)) => l.cmp(r),
                {% endfor %}
                _ => ::core::unreachable!(),
                }
            } else {
                self_discriminant.cmp(&other_discriminant)
            }
        {% else %}
            match (self, other) {
            {% for variant in variants -%}
                ({{info.ref_name}}::{{ variant.enum_name }}(l), {{info.ref_name}}::{{ variant.enum_name }}(r)) => l.cmp(r),
            {% endfor %}
            }
        {% endif %}
        }
    }

    impl<'a> ::core::hash::Hash for {{info.ref_name}}<'a> {
        fn hash<H: ::core::hash::Hasher>(&self, state: &mut H) {
            ::core::mem::discriminant(self).hash(state);
            match self {
            {% for variant in variants -%}
                {{info.ref_name}}::{{ variant.enum_name }}(v) => v.hash(state),
            {% endfor %}
            }
        }
    }
    {% else %}
    impl<'a, 'b> ::core::cmp::PartialOrd<{{info.ref_name}}<'a>> for {{info.ref_name}}<'b> {
        fn partial_cmp(&self, other: &{{info.ref_name}}<'_>) -> ::core::option::Option<::core::cmp::Ordering> {
        {% if variants.len() > 1 %}
            fn discriminant(value: &{{info.ref_name}}<'_>) -> u8 {
                match value {
                {% for variant in variants -%}
                    {{info.ref_name}}::{{ variant.enum_name }}(_) => {{loop.index}},
                {% endfor %}
                }
            }
            let self_discriminant = discriminant(self);
            let other_discriminant = discriminant(self);
            if self_discriminant == other_discriminant {
                match (self, other) {
                {% for variant in variants -%}
                    ({{info.ref_name}}::{{ variant.enum_name }}(l), {{info.ref_name}}::{{ variant.enum_name }}(r)) => l.partial_cmp(r),
                {% endfor %}
                _ => ::core::unreachable!(),
                }
            } else {
                self_discriminant.partial_cmp(&other_discriminant)
            }
        {% else %}
            match (self, other) {
            {% for variant in variants -%}
                ({{info.ref_name}}::{{ variant.enum_name }}(l), {{info.ref_name}}::{{ variant.enum_name }}(r)) => l.partial_cmp(r),
            {% endfor %}
            }
        {% endif %}
        }
    }
    {% endif %}
{% else %}
impl<'a> ::core::convert::TryFrom<{{info.ref_name}}<'a>> for {{info.owned_name}} {
    type Error = ::planus::Error;

    fn try_from(value: {{info.ref_name}}<'a>) -> ::planus::Result<Self> {
        ::core::result::Result::Ok(match value {
            {% for variant in variants -%}
                {% if variant.owned_type.starts_with("::planus::alloc::boxed::Box<") %}
                {{info.ref_name}}::{{ variant.enum_name }}(value) => Self::{{variant.enum_name}}(::planus::alloc::boxed::Box::new(::core::convert::TryFrom::try_from(value)?)),
                {% else %}
                {{info.ref_name}}::{{ variant.enum_name }}(value) => Self::{{variant.enum_name}}(::core::convert::TryFrom::try_from(value)?),
                {% endif %}
            {% endfor %}
        })
    }
}
{% endif %}

{% if variants.is_empty() %}
impl<'a> ::planus::TableReadUnion<'a> for {{info.ref_name}} {
    fn from_buffer(_buffer: ::planus::SliceWithStartOffset<'a>, _field_offset: usize, tag: u8) -> ::core::result::Result<Self, ::planus::errors::ErrorKind> {
        ::core::result::Result::Err(::planus::errors::ErrorKind::UnknownUnionTag { tag })
    }
}
{% else %}
impl<'a> ::planus::TableReadUnion<'a> for {{info.ref_name}}<'a> {
    fn from_buffer(buffer: ::planus::SliceWithStartOffset<'a>, field_offset: usize, tag: u8) -> ::core::result::Result<Self, ::planus::errors::ErrorKind> {
        match tag {
            {% for variant in variants -%}
                {%- if variant.is_struct -%}
                    {{loop.index}} => {
                        let struct_offset: u32 = ::planus::TableRead::from_buffer(buffer, field_offset)?;
                        ::core::result::Result::Ok(Self::{{ variant.enum_name }}(::planus::TableRead::from_buffer(buffer, field_offset + struct_offset as usize)?))
                    }
                {%- else -%}
                    {{loop.index}} => ::core::result::Result::Ok(Self::{{ variant.enum_name }}(::planus::TableRead::from_buffer(buffer, field_offset)?)),
                {%- endif -%}
            {%- endfor -%}
            _ => ::core::result::Result::Err(::planus::errors::ErrorKind::UnknownUnionTag { tag }),
        }
    }
}
{% endif %}
